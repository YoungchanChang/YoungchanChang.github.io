I"G1<ol>
  <li>어지러운 상태는 왜? 정리정돈!!!</li>
</ol>

<ul>
  <li>
    <p>물건이 필요할 때 찾는 것이 느려진다.</p>
  </li>
  <li>
    <p>정리정돈하면 더 많은 것들을 담을 수 있게 된다.</p>
  </li>
  <li>
    <p>인간의 인지능력에는 한계가 있다. 정리정돈덕분에 대상을 단순화 할 수 있다.</p>
  </li>
  <li>
    <p>object. 객체를 통해서 정리정돈 할 수 있다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">서로 연관된 변수와 함수를 그룹핑하고 이름을 붙인 것</code></p>
  </li>
</ul>

<ol>
  <li>js파일 실행시켜보기</li>
</ol>

<ul>
  <li>
    <p>hello.js파일을 생성한 후에 콘솔을 찍어본다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">node hello.js</code>로 실행시키면 된다.</p>
  </li>
  <li>
    <p>hello.html로 실행시킬 것이면 아래와 같이 작성한다.</p>
  </li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;script&gt;</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello OOP</span><span class="dl">"</span><span class="p">);</span>
    <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></div></div>

<ol>
  <li>정보를 만드는 것, 읽는 것이 가장 기본이다! 수정, 삭제!</li>
</ol>

<ul>
  <li>
    <p>객체? 1. 이름이 있는 정보를 정리할 때 쓰는 도구이다. 2. 읽을 때는 .이나 []로 쓴다. 3. 업데이틓 ㅏㄹ 때는 =로 쓴다. 지울 때는 delete연산자를 쓰면 된다.</p>
  </li>
  <li>
    <p>배열 생성하는 방법, 객체 생성하는 방법</p>
  </li>
  <li>
    <p>배열을 쓸 것이냐 객체를 쓸 것이냐 특성이 다르다.</p>
  </li>
  <li>
    <p>목록만 있으면 배열을 쓰면 된다. 어떤 데이터인지를 설명해야 한다.</p>
  </li>
  <li>
    <p>중괄호 시작.</p>
  </li>
  <li>
    <p>배열에 있는 값을 접근할 때는 대괄호, 객체에서는 .을 쓴다.</p>
  </li>
  <li>
    <p>객체는 .으로 대괄호를 통해 접근할 수 있다. 배열은 대괄호로만 접근한다.</p>
  </li>
</ul>

<h3 id="수정하기">수정하기</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">memberObject.desinger = 'leezhe';</code></li>
</ul>

<h3 id="삭제하기">삭제하기</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">delete memberObject.manager</code></li>
</ul>

<h3 id="배열은-반복문이랑-사용할-때-장점">배열은 반복문이랑 사용할 때 장점</h3>
<ul>
  <li>여러개의 data를 반복적으로 처리할 때 거대한 작업을 할 수 있다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">group</span><span class="p">(</span><span class="dl">'</span><span class="s1">array loop</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">while</span><span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">memberArray</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">memberArray</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
  <span class="nx">i</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">groupEnd</span><span class="p">(</span><span class="dl">'</span><span class="s1">array loop</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">tip! 콘솔을 console.group();</code>으로 묶으면 보기 좋게 시각적으로 표현해준다.</p>
  </li>
  <li>
    <p>객체에서 사용하는 for문은 for in문이라고 한다. 객체의 값만큼 중괄호의 내용이 실행된다.</p>
  </li>
  <li>in뒤쪽에는 객체, 앞에는 객체가 반복적으로 실행될 때마다 순번에 해당되는 원소의 <strong>이름</strong>이 주입될 변수가 온다.</li>
  <li>객체의 각각의 속성의 이름이 와야된다. .은 안 되고 대괄호로 해야한다. memberObject[name]은 변수가 된다.</li>
  <li>.뒤에는 변수가 올 수 없다. / <code class="language-plaintext highlighter-rouge">속성의 이름이 와야한다</code></li>
  <li>배열에서 사용하는 대괄호로 바꿔야 한다.</li>
  <li></li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">group</span><span class="p">(</span><span class="dl">'</span><span class="s1">object loop</span><span class="dl">'</span><span class="p">);</span>
<span class="k">for</span><span class="p">(</span> <span class="kd">var</span> <span class="nx">name</span> <span class="k">in</span> <span class="nx">memberObject</span> <span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">memberObject</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">groupEnd</span><span class="p">(</span><span class="dl">'</span><span class="s1">object loop</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>반복문과 배열은 필수이다! 객체에서 반복문은 있다는 정도만 알아라!</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">중요</code></p>
<ul>
  <li>배열은 인덱스 번호로 데이터를 접근할 때 사용 / for문으로 index번호 증가시킴</li>
  <li>객체는 값의 이름으로 데이터를 접근할 때 사용 / for in문으로 안에있는 이름값을 가져옴. []로 접근해야함.</li>
</ul>

<h1 id="객체의-사용사례">객체의 사용사례</h1>

<ul>
  <li>
    <p>객체의 실제 사용 사례</p>
  </li>
  <li>
    <p>built-in.js파일을 생성한다. 파이 ∏ = 3.14</p>
  </li>
  <li>
    <p>내장된 함수가 있다.</p>
  </li>
  <li>
    <p>기능을 정리정돈해서 제공해야한다.</p>
  </li>
  <li>
    <p>수학과 관련된 내용을 그루핑해서 정리정돈했다.</p>
  </li>
  <li>
    <p>함수 vs 메소드? 객체에 소속된 함수를 메소드라고 한다.</p>
  </li>
  <li>
    <p>이름을 주고 함수로 지정한다. 하나의 변수처럼 쓴다.</p>
  </li>
  <li>
    <p>연관된 변수와 함수를 객체로 그루핑해서 이름을 붙인 것이다.</p>
  </li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">var</span> <span class="nx">MyMath</span> <span class="o">=</span> <span class="p">{</span>

<span class="na">random</span> <span class="p">:</span> <span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">();</span> <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 객체로 안 만들 때</span>
<span class="c1">// 디렉터리를 배우기 싫으면 클래스로 안 만들어도 된다.</span>
<span class="c1">// 파일 이름 앞에 접두사를 붙인다. 디렉터리를 만들고 서로 연관된 파일을 몰아넣을 수 있다.</span>
<span class="kd">function</span> <span class="nx">random</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="객체--연관된-함수와-변수를-그루핑해서-이름을-붙인-것">객체 : 연관된 함수와 변수를 그루핑해서 이름을 붙인 것.</h1>

<ul>
  <li>
    <p>대명사 this. 자기 자신을 가리키는 대명사가 있다.</p>
  </li>
  <li>
    <p>[불편함]자기가 속해있는 객체가 어떤 이름을 갖게될 지 알 수 없다.</p>
  </li>
  <li>
    <p>왜 this? 지역변수와 전역변수가 있다. 지역은 새롭게 공간에 들어가게 된다. 그렇기 때문에 완전 새로운 공간이다.</p>
  </li>
  <li>
    <p>kim.first + kim.second로 하면 된다.</p>
  </li>
  <li>
    <p>메소드가 자신이 속해있는 객체를 가리키는 특수한 키워드를 만들기로 약속한다. 나는, 저는같은 역할을 한다.</p>
  </li>
  <li>
    <p>this!!!</p>
  </li>
</ul>

<h3 id="양산-체계를-가질-수-있다">양산 체계를 가질 수 있다.</h3>

<ul>
  <li>
    <p>constructor의 필요성. 공장의 느낌!!!</p>
  </li>
  <li>
    <p>인자값을 넣으면 값에 따라서 객체가 초기화 된다.</p>
  </li>
  <li>WHY NEED?</li>
  <li>이전에는 중괄호를 통해서 객체를 만들 때마다 다시 정의해줘야 한다.</li>
  <li>
    <p>속성값 몇 개를 줌으로써 필요한 값을 빠르게 생성할 수 있게 된다.</p>
  </li>
  <li>
    <p>같은 형태의 data이지만 그 안의 속성값이 다른 경우 속성값만 줌으로써 새롭게 찍어낼 수 있다.</p>
  </li>
  <li>constructor을 쓰면 앞에 new를 사용함으로써 실행할 때마다 객체가 양산된다.</li>
  <li>constructor function의 내용을 바꾸면 갚을 2개만 받는다, 3개만 받는다가 된다.</li>
  <li>
    <p>constructor function()에 만들어진 객체가 한번에 바뀐다.</p>
  </li>
  <li>
    <p>객체는 템플릿이라서 똑같은 객체를 만들 수 있다.</p>
  </li>
  <li>
    <p>객체를 찍어내는 공장을 만들기</p>
  </li>
  <li>Date의 예시. 인자값을 넣어주면 내부적으로 해당 값을 갖고있는 객체가 생성이 된다.</li>
  <li>앞에 new를 붙였을 때 객체를 만들어서 return해주고 있다.</li>
  <li>인자값만 관리해주면 된다!!!</li>
  <li>
    <p>안에 메소드들이 있다.</p>
  </li>
  <li>The purpose of constructor is to initialize the object of a class</li>
  <li>
    <p>the purpose of a method is to perform a task</p>
  </li>
  <li>옛날에는 변수명.함수() return부분이 잘 이해가 되지 않았었다.</li>
  <li>자판기 비유</li>
</ul>

<h1 id="prototype">prototype</h1>
<ul>
  <li>
    <p>왜 쓰니? 함수가 생성될 때마다 새로 만들어진다. 메모리가 낭비가 된다.</p>
  </li>
  <li>
    <p>메소드를 바꾸고 싶을 때,</p>
  </li>
  <li>
    <p>생성자 안에서 메소드 갖는 단점. 생산성이 많이 떨어진다.</p>
  </li>
  <li>
    <p>공통적으로 사용하는 함수를 만들고 싶다. 공통적으로 만드는 속성을 만들면 좋다.</p>
  </li>
  <li>
    <p>생성자 함수의 원형을 정한다.</p>
  </li>
  <li>이전의 결과와 똑같은 결과가 실행이 된다. 차이점 : Person Constructor생성자 함수 안에 정의하는 것이 없다.</li>
  <li>한 번만 만들어지기때문에 메모리가 절약된다.</li>
</ul>

<h1 id="느낀점">느낀점</h1>

<ul>
  <li>객체와 배열의 의미를 다시 한 번 생각했다. 객체에 이름을 붙이는 자바스크립트</li>
  <li>배열은 같은 데이터 형태로만 이루어져있는데 실제 테스트해보니깐 아니었다. for in은 익숙하지 않았는데 다시 해봐야겠따.</li>
  <li>for in에서 - .이냐 []는 처음 공부했다.</li>
  <li>디렉터리로 파일 이름 구분한다는 것도 처음 알았다.</li>
  <li>console.group(‘object loop’); console.log(name, memberObject.name); console.groupEnd(‘object loop’);</li>
  <li>
    <p>처음 알았다.</p>
  </li>
  <li>앞에 new가 붙어있으면 생성자 함수라고 부른다.</li>
</ul>
:ET