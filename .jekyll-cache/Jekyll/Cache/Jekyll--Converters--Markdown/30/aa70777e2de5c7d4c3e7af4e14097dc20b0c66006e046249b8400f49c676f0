I"n<h1 id="언어마다-컨벤션이-있다">언어마다 컨벤션이 있다.</h1>

<h1 id="어떻게-해야-읽기-좋은-코드가-될까">어떻게 해야 읽기 좋은 코드가 될까?</h1>

<ul>
  <li>누가 봐도 읽기 좋은 코드가 되어야 한다.</li>
</ul>

<h3 id="이름-짓는-방법">이름 짓는 방법</h3>

<ul>
  <li>
    <p>언어마다 naming convention이 존재한다. 카멜케이스로 표기하되 클래스의 맨 앞문자는 대문자로 표기하고 변수, 삼수등은 소문자로 표기하는 등의 통용되는 규칙들이 존재한다.</p>
  </li>
  <li>
    <p>1.의도가 분명한 이름을 짓는다. 역할이 분명해야한다.</p>
  </li>
  <li>1-1) 줄여쓰지 않는다.</li>
  <li>
    <p>잘 알려진 축약어(ex&gt; CPU, for문에 i와 j)를 제외하고 축약어를 쓰지 말것(ex&gt; comp는 compare을 의미하는지 computer를 의미하는지 모른다.)</p>
  </li>
  <li>1-2) 애매한 단어를 쓰지 않는다.</li>
  <li>process 처리하다의 경우 무엇을 처리하는지 정확하지 않다. 무엇을 처리하는지 다른 단어를 쓰자.</li>
  <li>
    <p>유틸리티성 클래스는 추상적인 단어를 써도 적절하다.</p>
  </li>
  <li>1-3) 메소드의 경우 리턴값을 포함해서 이름을 짓는다.</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">return 'Empty' OR return list.get(0)</code>인 경우 getFirstElementorEmpty로 명시한다.</p>
  </li>
  <li>1-4) 단어의 뜻을 고류해서 이름을 짓는다.</li>
  <li>getX()는 존재한는 값을 가져올 때 쓴다. 없으면 에러가 뜬다. 반면, findY()는 찾아보고 없어도 된다.</li>
  <li>
    <p>initialize()는 객체의 상태를 최초로 설정한다. 반면, create()는 새 객체를 생성한다.</p>
  </li>
  <li>1-5) 단어의 이름은 통일되게 짓는다</li>
  <li>한 패키지에서 AuthenticationProvider로 지었다면 패키지 안의 클래스에서는 NotificationProvide로 짓는다.</li>
  <li>
    <p>productInfo, productData, productSummary로 나눠서 짓지 않는다.</p>
  </li>
  <li>1-6) 함수는 동사로 시작하고 목적어가 될 명사를 붙인다.</li>
  <li>boolean을 반환 하는 함수는 is, exists, has, use등으로 시작한다.</li>
  <li>boolean을 반환하는 함수는 긍정문으로 작성하자(if(isPossible()))</li>
</ul>

<h3 id="함수-작성법">함수 작성법</h3>

<ul>
  <li>1-1) 함수를 작게 만들기</li>
  <li>함수를 작게 만들수록 가독성과 유지보수에 좋다.</li>
  <li>유지 보수성을 위해서는 코드의 길이를 <strong>15줄 이내</strong>로 작성하자.</li>
  <li>
    <p><strong>수평방향 스크롤</strong>도 고려해서 개행하자.</p>
  </li>
  <li>1-2) 입력 형식에 대해서 제한을 둔다.</li>
  <li>
    <p>입력값을 검사하는 코드가 짧아진다.</p>
  </li>
  <li>1-3) 함수 내부도 추상화하라</li>
  <li>validateAndReport(){}메소드의 내부는 <code class="language-plaintext highlighter-rouge">validate(); report();</code>여야한다.</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Reporter report = new Reporter(); report.report();</code>처럼 객체를 생성해서 메소드를 사용하지 말자.</p>
  </li>
  <li>1-4) 중괄호는 중첩을 피하자</li>
  <li>메서드당 들여쓰기는 깊이가 한 단계 이상 넘어가지 말아야 한다.</li>
  <li>이중 for문을 쓰는 경우 안의 포문은 다른 메소드로 대체하자.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 변경 전</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">VERTICAL_SIZE</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="no">HORIZONTAL_SIZE</span><span class="o">;</span> <span class="n">j</span><span class="o">++){</span>
        <span class="n">showCell</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// 변경 후</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">VERTICAL_SIZE</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
    <span class="n">showLine</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>1-5) 매개변수의 개수는 줄이자</li>
  <li>
    <p>매개변수가 많으면 가독성을 크게 저하시킨다.</p>
  </li>
  <li>1-6) 인자 유효성검사는 하자</li>
  <li>함수 인자에 대해서는 유효성을 철저히 해야한다. 그러나 불필요한 검사나 중복 검사는 피해야한다.</li>
</ul>

:ET